image: docker:latest

stages:
  - build
  - deploy

build:
  stage: build
  image: node:14.0.0
  script:
    - export PORT="$PORT"
    - export REDIS_PASSWORD="$REDIS_PASSWORD"
    - export SECRET="$SECRET"
    - export REDIS_HOST="$REDIS_HOST"
    - export REDIS_PORT="$REDIS_PORT"
    - export POSTGRES_HOST="$POSTGRES_HOST"
    - export POSTGRES_PORT="$POSTGRES_PORT"
    - export POSTGRES_USER="$POSTGRES_USER"
    - export POSTGRES_PASSWORD="$POSTGRES_PASSWORD"
    - export POSTGRES_DATABASE="$POSTGRES_DATABASE"
    - export MODE="$MODE"
    - export RUN_MIGRATIONS="true"
    - export DATA_EXPIRE="60*60"
    - export GAME_SERVICE="gameService0"
    - export AWS_REGION="$AWS_REGION"
    - export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
    - export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
    - export AWS_PUBLIC_BUCKET_NAME="$AWS_PUBLIC_BUCKET_NAME"
    - npm install
    - npm run build
    - echo "BUILD SUCCESSFULLY"
  artifacts:
    paths:
      - dist/
    expire_in: 20 mins
  environment:
    name: production
  only:
    - master

deploy:
  stage: deploy
  image: node:14.0.0
  dependencies:
    - build
  script:
    - apt-get update -qq
    - apt-get install -qq git
    - apt-get install -qq rsync

    # Setup SSH deploy keys
    - 'which ssh-agent || ( apt-get install -qq openssh-client )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

    # Run command on server
    - rsync -avz -e 'ssh' ./dist $SSH_HOST:$PROJECT_PATH
    - echo "DEPLOYED SUCCESSFULLY"
  environment:
    name: production
  only:
    - master
